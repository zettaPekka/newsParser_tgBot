from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart

from database.crud import create_user_if_not_exists, get_filter, set_filter
from parse import get_news
from keyboards.user_kbs import filters_kb, options_filters_kb, start_kb, regenerate_kb
from ai_regenerate import regenerate


user_router = Router()


def validate_filter(filter_name: str):
    output_filter = {
        'world': '–ü–æ–ª–∏—Ç–∏–∫–∞',
        'economics': '–≠–∫–æ–Ω–æ–º–∏–∫–∞',
        'sport': '–°–ø–æ—Ä—Ç',
        'culture': '–ö—É–ª—å—Ç—É—Ä–∞',
        'science': '–ù–∞—É–∫–∞'
    }
    
    return output_filter.get(filter_name) if output_filter.get(filter_name) else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'


@user_router.message(CommandStart())
async def start_handler(message: Message):
    await create_user_if_not_exists(message.from_user.id)
    await message.answer('<b>üëãüèª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç! –ü–æ–ª—É—á–∞–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É –∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π—Ç–µ –∏—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≤–∞—à–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ. –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /news –∏ —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É, –∞ —è —Å–¥–µ–ª–∞—é –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ</b>',
                            reply_markup=start_kb)


@user_router.callback_query(F.data == 'start_get_news')
async def start_get_news_handler(callback: CallbackQuery):
    await callback.answer()
    
    filter_name = await get_filter(callback.from_user.id)
    filter_name = validate_filter(filter_name)

    await callback.message.edit_text(f'<b>–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ç–µ–º–∞—Ç–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π\n–§–∏–ª—å—Ç—Ä: {filter_name}</b>', 
                                        reply_markup=filters_kb)

@user_router.message(Command('news'))
async def news_handler(message: Message):
    filter_name = await get_filter(message.from_user.id)
    filter_name = validate_filter(filter_name)

    await message.answer(f'<b>–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ç–µ–º–∞—Ç–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π\n–§–∏–ª—å—Ç—Ä: {filter_name}</b>', 
                                        reply_markup=filters_kb)


@user_router.callback_query(F.data == 'get_news')
async def get_news_handler(callback: CallbackQuery):
    await callback.answer()
    waiting_message = await callback.message.answer('<b>–û–∂–∏–¥–∞–π—Ç–µ...</b>')
    
    filter_name = await get_filter(callback.from_user.id)
    try:
        title, main_part, img_url = await get_news(rubric=filter_name)
    except:
        await callback.message.answer('<b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</b>')
        return
    await callback.message.answer_photo(img_url, caption=f'<b>{title}</b>\n\n<i>{main_part}</i>',
                                    reply_markup=regenerate_kb)
    await waiting_message.delete()


@user_router.callback_query(F.data == 'back')
async def back_handler(callback: CallbackQuery):
    await callback.answer()
    filter_name = await get_filter(callback.from_user.id)
    filter_name = validate_filter(filter_name)

    await callback.message.edit_text(f'<b>–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ç–µ–º–∞—Ç–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π\n–§–∏–ª—å—Ç—Ä: {filter_name}</b>', 
                                        reply_markup=filters_kb)

@user_router.callback_query(F.data == 'regenerate')
async def regenerate_handler(callback: CallbackQuery):
    await callback.answer()
    waiting_message = await callback.message.answer('<b>–û–∂–∏–¥–∞–π—Ç–µ...</b>')

    regenerated_text = await regenerate(callback.message.caption)
    try:
        await callback.message.edit_caption(str(callback.message.message_id), caption=regenerated_text, reply_markup=regenerate_kb)
    except:
        pass
    await waiting_message.delete()


@user_router.callback_query(F.data == 'filters')
async def filters_handler(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π</b>', reply_markup=options_filters_kb)


@user_router.callback_query(F.data.startswith('filter_'))
async def set_filter_handler(callback: CallbackQuery):
    await callback.answer()
    
    filter_name = callback.data.split('_')[1]
    
    if filter_name == 'reset':
        await set_filter(callback.from_user.id, None)
    else:
        await set_filter(callback.from_user.id, filter_name)
    
    filter_name = validate_filter(filter_name)
    await callback.message.edit_text(f'<b>–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä —Ç–µ–º–∞—Ç–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π\n–§–∏–ª—å—Ç—Ä: {filter_name}</b>', 
                                        reply_markup=filters_kb)
